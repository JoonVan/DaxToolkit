/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
#ifndef __daxAutoGeneratedModule_h
#define __daxAutoGeneratedModule_h

#include "daxModule.h"

/// daxAutoGeneratedModule is used to generate a module from a functor string.
/// The functor string must have a header known as the Module Description File
/// (MDF) which described the module. The format of the functor code is as
/// follows.:
/// \code
/// // FUNCTOR MODULE VERSION 0.0.3
/// // MODULE ${name of the module}
/// // INPUT ${name}; ${type}; ${default};
/// // INPUT ${name}; ${type}; ${default};
/// // ...
/// // OUTPUT ${name}; ${type};
/// // OUTPUT ${name}; ${type};
/// ...
/// void ${name}_functor(...)
/// {
/// }
/// \endcode
/// Note that all keywords are case sensitive.
class daxAutoGeneratedModule : public daxModule
{
public:
  daxAutoGeneratedModule();
  virtual ~daxAutoGeneratedModule();
  daxTypeMacro(daxAutoGeneratedModule, daxModule);

  /// Parse a string to populate the module.
  bool Initialize(const std::string& definition);

  /// Returns the name for this module.
  virtual const std::string& GetModuleName() const;

  /// Returns the functor code.
  virtual const std::string& GetFunctorCode() const;

  /// Returns the type for the module.
  virtual Types GetType() const
    { return this->Type; }

protected:
  std::string ModuleName;
  std::string FunctorCode;
  Types Type;

private:
  daxDisableCopyMacro(daxAutoGeneratedModule);
};

daxDefinePtrMacro(daxAutoGeneratedModule);

#endif
