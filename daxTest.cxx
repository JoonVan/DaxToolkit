/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

=========================================================================*/

#include "daxExecutive.h"
#include "daxModule.h"
#include "daxAutoGeneratedModule.h"
#include "daxImageData.h"
#include "PassThrough.cl.h"

#include "daxArray.h"

#include "assert.h"
#include <string.h>

int main(int, char**)
{
  daxArrayPtr array(new daxArray());
  array->Set(daxArray::ELEMENT_TYPE(), 12);
  cout << array->Get(daxArray::ELEMENT_TYPE()) << endl;
  
  daxExecutivePtr executive(new daxExecutive());
  daxAutoGeneratedModulePtr moduleA(new daxAutoGeneratedModule());
  assert(moduleA->Initialize(daxHeaderString_PassThrough) != false);

  daxAutoGeneratedModulePtr moduleB(new daxAutoGeneratedModule());
  assert(moduleB->Initialize(daxHeaderString_PassThrough) != false);

  daxAutoGeneratedModulePtr moduleC(new daxAutoGeneratedModule());
  assert(moduleC->Initialize(daxHeaderString_PassThrough) != false);

  executive->Connect(moduleB, "outarray", moduleC, "inarray");
  executive->Connect(moduleA, "outarray", moduleB, "inarray");


  // Create input-buffer.
  daxImageDataPtr inputData(new daxImageData());
  inputData->SetDimensions(100, 100, 100);
  float offset = 0.0f;
  for (int x=0; x <inputData->GetDimensions()[0]; x++)
    {
    for (int y=0; y < inputData->GetDimensions()[1]; y++)
      {
      for (int z=0; z < inputData->GetDimensions()[2]; z++)
        {
        inputData->GetDataPointer(x, y, z)[0] = offset++;
        }
      }
    }

  daxImageDataPtr outputData(new daxImageData());
  outputData->SetDimensions(100, 100, 100);
  memset(outputData->GetData(), 0, outputData->GetDataSize(NULL));

  executive->Execute(inputData.get(), outputData.get());

  for (int x=0; x <inputData->GetDimensions()[0]; x++)
    {
    for (int y=0; y < inputData->GetDimensions()[1]; y++)
      {
      for (int z=0; z < inputData->GetDimensions()[2]; z++)
        {
        assert(inputData->GetDataPointer(x, y, z)[0] ==
          outputData->GetDataPointer(x, y, z)[0]);
        }
      }
    }

  return 0;
}
