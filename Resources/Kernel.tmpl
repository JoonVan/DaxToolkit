
// Depends on google-ctemplate system for substitutions.
__constant uint __daxNumberOfArrays = {{dax_array_count}};

// Here were define the real "daxGetArray*" functions used by the user-kernels.
{{#dax_get_array_kernels}}
{{dax_get_array_kernel}}
{{/dax_get_array_kernels}}

__kernel void entry_point(
  // we assume that there are __daxNumberOfArrays items in arrayCores.
  __constant const __daxArrayCore* arrayCores,

  // for each global input-array
{{#dax_input_arrays}}
  __constant float* {{dax_name}} {{#dax_input_arrays_separator}},{{/dax_input_arrays_separator}}
{{/dax_input_arrays}}

 // DOH! I need to insert a ',' here conditionally. For now, I am going to
 // assumer there's always atleast 1 input and 1 output array.
 ,

  // for each global output-array
{{#dax_output_arrays}}
  __global float* {{dax_name}} {{#dax_output_arrays_separator}},{{/dax_output_arrays_separator}}
{{/dax_output_arrays}}
)
{
  daxWork work;
  __daxInitializeWorkFromGlobal(&work);
  //
  __private daxArray arrays[{{dax_array_count}}];
  __daxInitializeArrays(arrays, arrayCores, __daxNumberOfArrays);

  //
  // for each input array initialize the appropriate "daxArray" object.
{{#dax_input_arrays}}
  arrays[{{dax_index}}].InputDataF = {{dax_name}};
{{/dax_input_arrays}}

{{#dax_output_arrays}}
  arrays[{{dax_index}}].OutputDataF = {{dax_name}};
{{/dax_output_arrays}}
  //
  // Setup generators correctly for each of the arrays.
{{#dax_generated_arrays}}
  arrays[{{dax_index}}].Generator = {{dax_generator_id}};
{{/dax_generated_arrays}}

  //
  // This will go over all the arrays and start generating every output array
  // for the work specified.
{{#dax_output_arrays}}
  daxGetArrayValue3___final__(&work, &arrays[{{dax_index}}]);
{{/dax_output_arrays}}
}
