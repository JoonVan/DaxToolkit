//=============================================================================
//
//  Copyright (c) Kitware, Inc.
//  All rights reserved.
//  See LICENSE.txt for details.
//
//  This software is distributed WITHOUT ANY WARRANTY; without even
//  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//  PURPOSE.  See the above copyright notice for more information.
//
//  Copyright 2012 Sandia Corporation.
//  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
//  the U.S. Government retains certain rights in this software.
//
//=============================================================================
#ifndef __dax_internal_Configure_h
#define __dax_internal_Configure_h

#cmakedefine DAX_USE_DOUBLE_PRECISION

#cmakedefine DAX_USE_64BIT_IDS

#define DAX_SIZE_FLOAT @DAX_SIZE_FLOAT@
#define DAX_SIZE_DOUBLE @DAX_SIZE_DOUBLE@
#define DAX_SIZE_INT @DAX_SIZE_INT@
#define DAX_SIZE_LONG @DAX_SIZE_LONG@
#define DAX_SIZE_LONG_LONG @DAX_SIZE_LONG_LONG@

/// Alignment requirements are prescribed by CUDA on device (Table B-1 in NVIDIA
/// CUDA C Programming Guide 4.0)

#ifdef DAX_USE_DOUBLE_PRECISION
#define DAX_SIZE_SCALAR DAX_SIZE_DOUBLE
#define DAX_SIZE_TWO_SCALAR 16
#define DAX_SIZE_FOUR_SCALAR 8
#else
#define DAX_SIZE_SCALAR DAX_SIZE_FLOAT
#define DAX_SIZE_TWO_SCALAR 8
#define DAX_SIZE_FOUR_SCALAR 16
#endif

#ifdef DAX_USE_64BIT_IDS
#define DAX_SIZE_ID 8
# define DAX_SIZE_TWO_IDS 16
# define DAX_SIZE_FOUR_IDS 8
#else
#define DAX_SIZE_ID 4
# define DAX_SIZE_TWO_IDS 8
# define DAX_SIZE_FOUR_IDS 16
#endif

#if defined(_WIN32) && defined(_MSC_VER)
//if we are on windows with visual studio compiler we have some warnings we
//need to suppress

# pragma warning( disable : 4068 ) //disable warning that pragma are unsupported
# pragma warning( disable : 4097 ) //typedef is synonym for class
# pragma warning( disable : 4127 ) //conditional expression is constant
# pragma warning( disable : 4521 ) //multiple copy constructors of a single type

#endif

// This macro does not definitively determine whether TBB is available. Rather,
// it tells whether the original Dax repository was configured with TBB. An
// external project may or may not enable TBB.
#cmakedefine DAX_ENABLE_TBB

// This macro does not definitively determine whether thrust is used. Rather,
// it tells whether Dax was original configured with a thrust backend enabled.
#cmakedefine DAX_ENABLE_THRUST

//save out the thrust major and minor version so that we can detect
//what backend syntax we need to use
#ifdef DAX_ENABLE_THRUST
#define THRUST_MAJOR_VERSION @THRUST_MAJOR_VERSION@
#define THRUST_MINOR_VERSION @THRUST_MINOR_VERSION@
#endif
#endif //__dax_internal_Configure_h
