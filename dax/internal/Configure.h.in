//=============================================================================
//
//  Copyright (c) Kitware, Inc.
//  All rights reserved.
//  See LICENSE.txt for details.
//
//  This software is distributed WITHOUT ANY WARRANTY; without even
//  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//  PURPOSE.  See the above copyright notice for more information.
//
//  Copyright 2012 Sandia Corporation.
//  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
//  the U.S. Government retains certain rights in this software.
//
//=============================================================================
#ifndef __dax_internal_Configure_h
#define __dax_internal_Configure_h


#if !defined(DAX_USE_DOUBLE_PRECISION) && !defined(DAX_NO_DOUBLE_PRECISION)
#cmakedefine DAX_USE_DOUBLE_PRECISION
#endif

#if defined(DAX_USE_DOUBLE_PRECISION) && defined(DAX_NO_DOUBLE_PRECISION)
# error Both DAX_USE_DOUBLE_PRECISION and DAX_NO_DOUBLE_PRECISION defined.  Do not know what to do.
#endif

#if !defined(DAX_USE_64BIT_IDS) && !defined(DAX_NO_64BIT_IDS)
#cmakedefine DAX_USE_64BIT_IDS
#endif

#if defined(DAX_USE_64BIT_IDS) && defined(DAX_NO_64BIT_IDS)
# error Both DAX_USE_64BIT_IDS and DAX_NO_64BIT_IDS defined.  Do not know what to do.
#endif

#define DAX_SIZE_FLOAT @DAX_SIZE_FLOAT@
#define DAX_SIZE_DOUBLE @DAX_SIZE_DOUBLE@
#define DAX_SIZE_INT @DAX_SIZE_INT@
#define DAX_SIZE_LONG @DAX_SIZE_LONG@
#define DAX_SIZE_LONG_LONG @DAX_SIZE_LONG_LONG@

#ifdef DAX_USE_DOUBLE_PRECISION
# ifndef DAX_SIZE_SCALAR
#  define DAX_SIZE_SCALAR DAX_SIZE_DOUBLE
# endif
# ifndef DAX_ALIGNMENT_TWO_SCALAR
#  define DAX_ALIGNMENT_TWO_SCALAR 16
# endif
# ifndef DAX_ALIGNMENT_FOUR_SCALAR
#  define DAX_ALIGNMENT_FOUR_SCALAR 8
# endif
#else
# ifndef DAX_SIZE_SCALAR
#  define DAX_SIZE_SCALAR DAX_SIZE_FLOAT
#  define DAX_ALIGNMENT_SCALAR DAX_SIZE_SCALAR
# endif
# ifndef DAX_ALIGNMENT_TWO_SCALAR
#  define DAX_ALIGNMENT_TWO_SCALAR 8
# endif
# ifndef DAX_ALIGNMENT_FOUR_SCALAR
#  define DAX_ALIGNMENT_FOUR_SCALAR 16
# endif
#endif

#ifdef DAX_USE_64BIT_IDS
# ifndef DAX_SIZE_ID
#  define DAX_SIZE_ID 8
# endif
#else
# ifndef DAX_SIZE_ID
#  define DAX_SIZE_ID 4
# endif
#endif

// This macro does not definitively determine whether TBB is available. Rather,
// it tells whether the original Dax repository was configured with TBB. An
// external project may or may not enable TBB.
#ifndef DAX_ENABLE_TBB
#cmakedefine DAX_ENABLE_TBB
#endif

// This macro does not definitively determine whether thrust is used. Rather,
// it tells whether Dax was original configured with a thrust backend enabled.
#ifndef DAX_ENABLE_THRUST
#cmakedefine DAX_ENABLE_THRUST
#endif

//Mark if we are building with interop enabled
#ifndef DAX_ENABLE_OPENGL_INTEROP
#cmakedefine DAX_ENABLE_OPENGL_INTEROP
#endif

//save out the thrust major and minor version so that we can detect
//what backend syntax we need to use
#ifdef DAX_ENABLE_THRUST
# ifndef THRUST_MAJOR_VERSION
#  define THRUST_MAJOR_VERSION @THRUST_MAJOR_VERSION@
# endif

# ifndef THRUST_MINOR_VERSION
#  define THRUST_MINOR_VERSION @THRUST_MINOR_VERSION@
# endif
#endif

// Determine whether we will use variadic templates (a new feature in C++11).
// Currently have VARIADIC_TEMPLATE support off.
#cmakedefine DAX_NO_VARIADIC_TEMPLATE
#if !defined(DAX_USE_VARIADIC_TEMPLATE) && !defined(DAX_NO_VARIADIC_TEMPLATE)
// Currently using Boost to determine support.
# include <boost/config.hpp>
# if defined(BOOST_HAS_VARIADIC_TMPL)
#  define DAX_USE_VARIADIC_TEMPLATE 1
# endif
#endif

#if defined(DAX_USE_VARIADIC_TEMPLATE) && defined(DAX_NO_VARIADIC_TEMPLATE)
# error Both DAX_USE_VARIADIC_TEMPLATE and DAX_NO_VARIADIC_TEMPLATE defined.  Do not know what to do.
#endif

#endif //__dax_internal_Configure_h
