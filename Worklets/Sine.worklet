/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

===========================================================================*/
#ifndef __Sine_worklet_
#define __Sine_worklet_

#include <dax/exec/Cell.h>
#include <dax/exec/Field.h>
#include <dax/exec/WorkMapField.h>

// TODO: Template to handle any field type, scalar or vector.


namespace dax {
namespace worklet {

template<class CellType>
DAX_WORKLET void Sine(
    DAX_IN dax::exec::WorkMapField<CellType> &work,
    DAX_IN const dax::exec::Field<dax::Vector3> &inField,
    DAX_OUT dax::exec::Field<dax::Vector3> &outField)
{
  dax::Vector3 inValue = work.GetFieldValue(inField);
  dax::Vector3 outValue
      = dax::make_Vector3(sinf(inValue.x), sinf(inValue.y), sinf(inValue.z));
  work.SetFieldValue(outField, outValue);
}

template<class CellType>
DAX_WORKLET void Sine(
    DAX_IN dax::exec::WorkMapField<CellType> &work,
    DAX_IN const dax::exec::Field<dax::Scalar> &inField,
    DAX_OUT dax::exec::Field<dax::Scalar> &outField)
{
  dax::Scalar inValue = work.GetFieldValue(inField);
  dax::Scalar outValue = sinf(inValue);
  work.SetFieldValue(outField, outValue);
}

}
}

#endif
