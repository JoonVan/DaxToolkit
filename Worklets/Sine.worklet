/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

===========================================================================*/
#ifndef __Sine_worklet_
#define __Sine_worklet_

#include <dax/exec/Cell.h>
#include <dax/exec/Field.h>
#include <dax/exec/WorkMapField.h>

#include <dax/TypeTraits.h>
#include <dax/VectorOperations.h>

template<typename T>
struct DoSine {
  DAX_EXEC_EXPORT T operator()(T x)
  {
    return static_cast<T>(sinf(x));
  }
};

template<class CellType, class FieldType>
DAX_WORKLET void Sine(
    DAX_IN dax::exec::WorkMapField<CellType> &work,
    DAX_IN const dax::exec::Field<FieldType> &inField,
    DAX_OUT dax::exec::Field<FieldType> &outField)
{
  typedef typename dax::VectorTraits<FieldType>::ValueType ComponentType;
  FieldType inValue = work.GetFieldValue(inField);
  FieldType outValue = dax::VectorMap(inValue, DoSine<ComponentType>());
  work.SetFieldValue(outField, outValue);
}

#endif
