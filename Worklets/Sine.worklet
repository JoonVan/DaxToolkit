/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

===========================================================================*/
#ifndef __Sine_worklet_
#define __Sine_worklet_

#include <dax/exec/Cell.h>
#include <dax/exec/Field.h>
#include <dax/exec/WorkMapField.h>

#include <dax/TypeTraits.h>

// TODO: Template to handle any field type, scalar or vector.

template<class CellType, class FieldType>
DAX_WORKLET void Sine(
    DAX_IN dax::exec::WorkMapField<CellType> &work,
    DAX_IN const dax::exec::Field<FieldType> &inField,
    DAX_OUT dax::exec::Field<FieldType> &outField)
{
  FieldType inValue = work.GetFieldValue(inField);
  FieldType outValue;
  for (int i = 0; i < dax::VectorTraits<FieldType>::NUM_COMPONENTS; i++)
    {
    typename dax::VectorTraits<FieldType>::ValueType result;
    result = sinf(dax::VectorTraits<FieldType>::GetComponent(inValue, i));
    dax::VectorTraits<FieldType>::SetComponent(outValue, i, result);
    }
  work.SetFieldValue(outField, outValue);
}

#endif
