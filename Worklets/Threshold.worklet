/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

===========================================================================*/
#ifndef __Threshold_worklet_
#define __Threshold_worklet_

#include <dax/exec/Cell.h>
#include <dax/exec/Field.h>
#include <dax/exec/WorkRemoveCell.h>

namespace dax {
namespace worklet {

template<int size, typename T>
DAX_EXEC_EXPORT char DoThreshold(T min, T max, T values[size])
{
  char valid=1;
  for(int i=0; i < size; ++i)
    {
    valid &= (values[i] > min) && (values[i] <= max);
    }
  return valid;
}

template<typename CellType, typename FieldType>
DAX_WORKLET void Threshold(
    DAX_IN dax::exec::WorkRemoveCell<CellType> &work,
    DAX_IN FieldType thresholdMin,
    DAX_IN FieldType thresholdMax,
    DAX_IN dax::exec::FieldPoint<FieldType> &inField)
{
  //compare the value at each point with the threshold min/max
  FieldType pointFieldValues[CellType::NUM_POINTS];
  work.GetFieldValues(inField,pointFieldValues);
  work.SetRemoveCell(DoThreshold<CellType::NUM_POINTS>(thresholdMin,
                                                       thresholdMax,
                                                       pointFieldValues));
}

}
} //dax::worklet

#endif


//we need to make a stencil class which this can use
//which define the proper settings for each of the CsG steps
//somehow stencil needs to define the following:
// the functors for classify size, scan, generate size, generate worklet
