//=============================================================================
//
//  Copyright (c) Kitware, Inc.
//  All rights reserved.
//  See LICENSE.txt for details.
//
//  This software is distributed WITHOUT ANY WARRANTY; without even
//  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//  PURPOSE.  See the above copyright notice for more information.
//
//  Copyright 2012 Sandia Corporation.
//  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
//  the U.S. Government retains certain rights in this software.
//
//=============================================================================

#ifndef __Threshold_worklet_
#define __Threshold_worklet_

#include <dax/exec/Cell.h>
#include <dax/exec/Field.h>
#include <dax/exec/VectorOperations.h>
#include <dax/exec/WorkDetermineNewCellCount.h>
#include <dax/exec/WorkGenerateTopology.h>

namespace dax {
namespace worklet {

template<typename T>

struct ThresholdFunction {
  const T Min;
  const T Max;
  int valid;

  DAX_EXEC_EXPORT ThresholdFunction(T& min, T&max):
    Min(min),Max(max),valid(1)
    {
    }

  DAX_EXEC_EXPORT void operator()(T value)
  {
    valid &= (value >= Min) && (value <= Max);
  }
};


template<typename CellType, typename FieldType, class ExecutionAdapter>
DAX_WORKLET void Threshold_Classify(
    dax::exec::WorkDetermineNewCellCount<CellType, ExecutionAdapter> &work,
    FieldType thresholdMin,
    FieldType thresholdMax,
    dax::exec::FieldPointIn<FieldType, ExecutionAdapter> &inField)
{
  //compare the value at each point with the threshold min/max
  dax::Tuple<FieldType,CellType::NUM_POINTS> fieldValues=
      work.GetFieldValues(inField);

  ThresholdFunction<FieldType> threshold(thresholdMin,thresholdMax);
  dax::exec::VectorForEach(fieldValues,threshold);
  work.SetNewCellCount(threshold.valid);
}

template<typename InCellType, class ExecutionAdapter>
DAX_WORKLET void Threshold_Topology(
    dax::exec::WorkGenerateTopology<
      InCellType,
      InCellType,
      ExecutionAdapter> &work)
{
  //we can ignore the the requested cell Id to generate
  //on the work object since we know for threshold it is a pass through
  work.SetOutputConnections(work.GetInputConnections());
}

//Threshold only works when the topology is the same for input and output/
//The only special case so far is converting CellVoxel to CellHexahedron
template<class ExecutionAdapter>
DAX_WORKLET void Threshold_Topology(
    dax::exec::WorkGenerateTopology<
      dax::exec::CellVoxel,
      dax::exec::CellHexahedron,
      ExecutionAdapter> &work)
{
  //we can ignore the the requested cell Id to generate
  //on the work object since we know for threshold it is a pass through
  work.SetOutputConnections(work.GetInputConnections());
}

}
} //dax::worklet

#endif
