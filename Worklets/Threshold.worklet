/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

===========================================================================*/
#ifndef __Threshold_worklet_
#define __Threshold_worklet_

#include <dax/exec/Cell.h>
#include <dax/exec/Field.h>
#include <dax/exec/WorkRemoveCell.h>

namespace dax {
namespace worklet {

template<typename T>
struct DoThreshold {
  DAX_EXEC_EXPORT dax::Id operator()(T min, T max, T x) const
  {
    return static_cast<char>((x > min) && (x <= max));
  }
};

template<typename CellType, typename FieldType>
DAX_WORKLET void Threshold(
    DAX_IN dax::exec::WorkRemoveCell<CellType> &work,
    DAX_IN FieldType thresholdMin,
    DAX_IN FieldType thresholdMax,
    DAX_IN dax::exec::FieldPoint<FieldType> &inField)
{
  //compare the value at each point with the threshold min/max
  CellType cell = work.GetCell();
  dax::Id number_of_points = cell.GetNumberOfPoints();
  char valid = 1;
  for (dax::Id vertexId = 0; vertexId < number_of_points; vertexId++)
    {
    FieldType inValue = work.GetFieldValue(inField, vertexId);
    char value = ((inValue > thresholdMin) && (inValue <= thresholdMax));
    valid &= value;
    }
  work.SetRemoveCell(valid);
}

}
} //dax::worklet

#endif


//we need to make a stencil class which this can use
//which define the proper settings for each of the CsG steps
//somehow stencil needs to define the following:
// the functors for classify size, scan, generate size, generate worklet
