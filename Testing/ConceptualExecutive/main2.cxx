/*=========================================================================

  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.  See the above copyright notice for more information.

===========================================================================*/
#include <stdio.h>
#include <iostream>

#include "HeterogeneousContainer.h"

#include "CompileTimeAssert.h"
#include "NamedFilter.h"
#include "Module.h"

#include "Worklets.h"

//these would be autogenerated by the worklet parser template
typedef Filter1< FieldModule < int > > Elevation;
typedef Filter1< FieldModule < float > > Sine;
typedef Filter1< FieldModule < bool > > Cos;
typedef Filter1< FieldModule < Grid > > Warp;

typedef Filter1<CellModuleWithPointInput <Grid> > Triangulate;

typedef Filter1<PointToCellModule  <float> > PointToCell;
typedef Filter1<CellToPointModule <double> > CellToPoint;

typedef Filter2<CellModuleWithPointInput <char> > Gradient;

void RuntimeFields()
{
  std::cout << "RuntimeFields" << std::endl;
  Grid grid(10,20);
  Model<Grid> model(grid);

  Elevation m(model.pointField());
  std::cout << "Filter data size is " << m.size() << std::endl;
  std::cout << "Field type is " << m.fieldType() << std::endl;
}

void ConnectFilterFields()
{
  std::cout << "ConnectFilterFields" << std::endl;
  Grid grid(10,20);
  Model<Grid> model(grid);
  {
    Elevation Filter1(model.pointField());
    Sine Filter2(Filter1);

    std::cout << "Filter1 Field Type: " << Filter1.fieldType() << " and is mergeable with Parent Filter: " << Filter1.isMergeable() << std::endl;
    std::cout << "Filter2 Field Type: " << Filter2.fieldType() << " and is mergeable with Parent Filter: " << Filter2.isMergeable() << std::endl;
  }

  {
    Elevation Filter3(model.cellField());
    Cos Filter4(Filter3);

    std::cout << "Filter1 Field Type: " << Filter3.fieldType() << " and is mergeable with Parent Filter: " << Filter3.isMergeable() << std::endl;
    std::cout << "Filter2 Field Type: " << Filter4.fieldType() << " and is mergeable with Parent Filter: " << Filter4.isMergeable() << std::endl;
  }
}

void ConnectPointToCell1()
{
  std::cout << "ConnectPointToCell1" << std::endl;
  Grid grid(10,20);
  Model<Grid> model(grid);

  Elevation Filter1(model.pointField());
  PointToCell Filter2(Filter1);

  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << std::endl;
  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << " and is mergeable with Parent Filter: " << Filter2.isMergeable() << std::endl;
}

void ConnectCellWithPoint()
{
  std::cout << "ConnectCellWithPoint" << std::endl;
  Grid grid(10,20);
  Model<Grid> model(grid);

  Warp Filter1(model.pointField());
  Triangulate Filter2(Filter1);

  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << std::endl;
  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << " and is mergeable with Parent Filter: " << Filter2.isMergeable() << std::endl;
}

void ConnectCellWithPoint2()
{
  std::cout << "ConnectCellWithPoint2" << std::endl;
  Grid grid(10,20);
  Model<Grid> model(grid);

  Elevation Filter1(model.pointField());
  Warp Filter2(model.cellField());
  Gradient Filter3(Filter2,Filter1);

  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << std::endl;
  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << " and is mergeable with Parent Filter: " << Filter2.isMergeable() << std::endl;
  std::cout << "Filter3 Field Type: " << Filter3.fieldType() << std::endl;
}

void ConnectCellToPoint()
{
  std::cout << "ConnectCellToPoint" << std::endl;
  Grid grid(10,20);
  Model<Grid> model(grid);

  Elevation Filter1(model.cellField());
  CellToPoint Filter2(Filter1);

  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << std::endl;
  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << " and is mergeable with Parent Filter: " << Filter2.isMergeable() << std::endl;
}

void ConnectPointToCell_TO_CellToPoint()
{
  std::cout << "ConnectCellToPoint" << std::endl;
  Grid grid(10,20);
  Model<Grid> model(grid);

  Elevation Filter1(model.pointField());
  PointToCell Filter2(Filter1);
  Warp FilterTest(Filter2);
  CellToPoint Filter3(FilterTest);

  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << std::endl;
  std::cout << "Filter2 Field Type: " << Filter2.fieldType() << " and is mergeable with Parent Filter: " << Filter2.isMergeable() << std::endl;
  std::cout << "Filter3 Field Type: " << Filter3.fieldType() << std::endl;
  std::cout << "FilterTest Field Type: " << FilterTest.fieldType() << std::endl;
}

int main(int argc, char* argv[])
{

  RuntimeFields();
  ConnectFilterFields();
  ConnectPointToCell1();
  ConnectCellWithPoint();
  ConnectCellWithPoint2();
  ConnectCellToPoint();
  ConnectPointToCell_TO_CellToPoint();

  return 0;
}
