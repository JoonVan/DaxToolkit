cmake_minimum_required(VERSION 2.8)
project (Functors)

# Find and import OpenCL.
option(FNC_ENABLE_OPENCL
  "Enable/disable OpenCL (required for any real execution)."
  OFF)

if (FNC_ENABLE_OPENCL)
  set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/FindOpenCL")
  find_package(OpenCL REQUIRED)
  include_directories(${OPENCL_INCLUDE_DIRS})
  if (NOT OPENCL_HAS_CPP_BINDINGS)
    include_directories("${CMAKE_SOURCE_DIR}/OpenCLCpp")
  endif()
endif()

# List of Boost features used:
# * Smart Ptr
# * xpressive
# * program options
find_package(Boost REQUIRED
  COMPONENTS program_options # program_options is only needed for the testing
                             # executables
  )

include_directories(${Boost_INCLUDE_DIRS}
  ${CMAKE_CURRENT_BINARY_DIR}

  )

add_executable(daxGenerateHeaderFromFile
  daxGenerateHeaderFromFile.cxx)
target_link_libraries(daxGenerateHeaderFromFile
  ${Boost_LIBRARIES})

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/daxOptions.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/daxOptions.h
  @ONLY)

function (encode_to_headers out_variable)
  set (all_headers)
  foreach(file ${ARGN})
    set(src ${CMAKE_CURRENT_SOURCE_DIR}/${file})
    get_filename_component(filename ${file} NAME)
    set(res ${CMAKE_CURRENT_BINARY_DIR}/${filename}.h)
    list(APPEND all_headers ${res})
    add_custom_command(
      OUTPUT ${res}
      DEPENDS ${src} daxGenerateHeaderFromFile
      COMMAND daxGenerateHeaderFromFile
      ARGS  --input-file ${src} --output-file ${res}
      )
  endforeach()
  set (${out_variable} ${all_headers} PARENT_SCOPE)
endfunction()

set (functor_modules
  Functors/PassThrough.cl
)

set (core_kernels
  Resources/CoreKernel.cl
  Resources/CoreMapField.cl
  Resources/CorePointIterator.cl
  Resources/CoreImageData.cl
)

set (generated_headers_core)
encode_to_headers(generated_headers_core
  ${core_kernels}
  )
set (generated_headers)
encode_to_headers(generated_headers
  ${functor_modules}
  )
#message ("Headers: ${generated_headers}")

# daxFramework is the core library
add_library(daxFramework SHARED
  daxAttributeKeyBase.cxx
  daxAttributeKeyBase.h
  daxAttributeKey.h
  daxArray.cxx
  daxArray.h
  daxAutoGeneratedModule.cxx
  daxAutoGeneratedModule.h
  daxDataObject.cxx
  daxDataObject.h
  daxExecutive.cxx
  daxExecutive.h
  daxField.cxx
  daxField.h
  daxImageData.cxx
  daxImageData.h
  daxModule.cxx
  daxModule.h
  daxObject.cxx
  daxObject.h
  daxPort.cxx
  daxPort.h
  ${generated_headers_core}
)

target_link_libraries(daxFramework
  ${Boost_LIBRARIES}
  )

if(FNC_ENABLE_OPENCL)
  target_link_libraries(daxFramework ${OPENCL_LIBRARIES})
endif()

foreach (file ${generated_headers_core})
  set_source_files_properties(daxObject.h
    PROPERTIES OBJECT_DEPENDS ${file})
endforeach()

# Add executables, mostly testing samples
add_executable(daxTest
  daxTest.cxx
  ${generated_headers}
  )

foreach (file ${generated_headers})
  set_source_files_properties(daxTest.cxx
    PROPERTIES OBJECT_DEPENDS ${file})
endforeach()

target_link_libraries(daxTest
  daxFramework
  )
